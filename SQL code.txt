-- A. High Level Sales Analysis

-- 1. What was the total quantity sold for all products?
SELECT SUM(qty) AS total_products_sold
FROM sales
---------------------------------------------------------------------------------------------------------------------

-- 2. What is the total generated revenue for all products before discounts?
SELECT SUM(qty*price) AS total_revenue
FROM sales
---------------------------------------------------------------------------------------------------------------------

-- 3. What was the total discount amount for all products?
SELECT SUM((qty*price)*(discount))/100 AS total_revenue
FROM sales




-- B. Transactional Analysis

-- 1. How many unique transactions were there?
SELECT COUNT(DISTINCT txn_id) AS unique_transactions
FROM sales
---------------------------------------------------------------------------------------------------------------------

-- 2. What is the average unique products purchased in each transaction?
SELECT ROUND(AVG(unique_products) AS avg_products
FROM (SELECT s.txn_id, COUNT(s.prod_id) AS unique_products
      FROM sales AS s
      JOIN product_details AS pd
      ON s.prod_id=pd.product_id
      GROUP BY s.txn_id) AS sub_q
---------------------------------------------------------------------------------------------------------------------

-- 3. What are the 25th, 50th and 75th percentile values for the revenue per transaction?
SELECT PERCENTILE_CONT(0.25) WITHIN GROUP(ORDER BY revenue ASC) AS percentile_25_revenue,
       PERCENTILE_CONT(0.50) WITHIN GROUP(ORDER BY revenue ASC) AS percentile_50_revenue,
	   PERCENTILE_CONT(0.75) WITHIN GROUP(ORDER BY revenue ASC) AS percentile_75_revenue
FROM (SELECT txn_id, SUM(qty*price) AS revenue
      FROM sales
      GROUP BY txn_id) AS sub_q
---------------------------------------------------------------------------------------------------------------------

-- 4. What is the average discount value per transaction?
SELECT ROUND(AVG(discount)) AS avg_discount
FROM (SELECT txn_id, SUM(qty*price*discount)/100::INTEGER AS discount
      FROM sales
      GROUP BY txn_id) AS sub
---------------------------------------------------------------------------------------------------------------------
-- 5. What is the percentage split of all transactions for members vs non-members?
WITH cte AS (
    SELECT member, COUNT(DISTINCT txn_id)::INTEGER AS count_member, (SELECT COUNT(DISTINCT txn_id) FROM sales)::INTEGER AS total
    FROM sales
    GROUP BY member)
SELECT member, ROUND(count_member/total:: DECIMAL,2)*100
FROM cte
---------------------------------------------------------------------------------------------------------------------

-- 6. What is the average revenue for member transactions and non-member transactions?
WITH cte AS (
    SELECT member, txn_id, SUM(price * qty) AS revenue
    FROM sales
    GROUP BY member, txn_id)
SELECT member, ROUND(AVG(revenue), 2) AS avg_revenue
FROM cte
GROUP BY member




-- C. Product Analysis

-- 1. What are the top 3 products by total revenue before discount?
SELECT pd.product_name, SUM(s.qty*s.price) AS revenue
FROM sales AS s
JOIN product_details AS pd
ON s.prod_id=pd.product_id
GROUP BY product_name
ORDER BY SUM(s.qty*s.price) DESC
LIMIT 3
---------------------------------------------------------------------------------------------------------------------

-- 2. What is the total quantity, revenue and discount for each segment?
SELECT pd.segment_name, 
       SUM(s.qty) AS total_qty, 
       SUM(s.qty*s.price) AS total_revenue, 
       ROUND(SUM(s.qty*s.price*s.discount)/100) AS total_discount
FROM sales AS s
JOIN product_details AS pd
ON s.prod_id=pd.product_id
GROUP BY pd.segment_name
---------------------------------------------------------------------------------------------------------------------

-- 3. What is the top selling product for each segment?
WITH cte AS (
    SELECT pd.segment_name, pd.product_name, SUM(s.qty) AS total_quantity, 
	   RANK()OVER( PARTITION BY pd.segment_name ORDER BY SUM(s.qty)) AS ranking
    FROM sales AS s
    JOIN product_details AS pd
    ON s.prod_id=pd.product_id
    GROUP BY pd.segment_name, pd.product_name
    ORDER BY pd.segment_name)
SELECT segment_name, product_name
FROM cte
WHERE ranking=1
---------------------------------------------------------------------------------------------------------------------

-- 4. What is the total quantity, revenue and discount for each category?
SELECT pd.category_name, 
       SUM(s.qty) AS total_qty, 
       SUM(s.qty*s.price) AS total_revenue, 
       ROUND(SUM(s.qty*s.price*s.discount)/100) AS total_discount
FROM sales AS s
JOIN product_details AS pd
ON s.prod_id=pd.product_id
GROUP BY pd.category_name
---------------------------------------------------------------------------------------------------------------------

-- 5. What is the top selling product for each category?
WITH cte AS (
    SELECT pd.category_name, pd.product_name, SUM(s.qty) AS total_quantity,
           RANK()OVER(PARTITION BY pd.category_name ORDER BY SUM(s.qty) DESC) AS ranking
    FROM sales AS s
    JOIN product_details AS pd
    ON s.prod_id=pd.product_id
    GROUP BY pd.category_name, pd.product_name)
SELECT category_name, product_name AS top_seller
FROM cte
WHERE ranking=1
--------------------------------------------------------------------------------------------------------------------

-- 6. What is the percentage split of revenue by product for each segment?
SELECT segment_name, product_name, ROUND((total_revenue/total_revenue_per_segmenmt)*100,2) AS percentage_of_revenue
FROM (SELECT pd.segment_name, pd.product_name, SUM(s.qty*s.price) AS total_revenue,
             SUM(SUM(s.qty*s.price))OVER(PARTITION BY pd.segment_name) AS total_revenue_per_segmenmt
      FROM sales AS s
      JOIN product_details AS pd
      ON s.prod_id=pd.product_id
      GROUP BY pd.segment_name, pd.product_name
      ORDER BY pd.segment_name) AS sub_q
--------------------------------------------------------------------------------------------------------------------

-- 7. What is the percentage split of revenue by segment for each category?
SELECT category_name, segment_name, ROUND((total_revenue/total_revenue_per_segmenmt)*100,2) AS percentage_of_revenue
FROM (SELECT pd.category_name, pd.segment_name, SUM(s.qty*s.price) AS total_revenue,
             SUM(SUM(s.qty*s.price))OVER(PARTITION BY pd.category_name) AS total_revenue_per_segmenmt
      FROM sales AS s
      JOIN product_details AS pd
      ON s.prod_id=pd.product_id
      GROUP BY pd.category_name, pd.segment_name
      ORDER BY pd.category_name) AS sub_q
--------------------------------------------------------------------------------------------------------------------


-- 8. What is the percentage split of total revenue by category?
SELECT pd.category_name, 
       ROUND(SUM(s.qty*s.price)/SUM(SUM(s.qty*s.price))OVER()*100, 2) AS percent_revenue
FROM sales AS s
JOIN product_details AS pd
ON s.prod_id=pd.product_id
GROUP BY pd.category_name
--------------------------------------------------------------------------------------------------------------------

-- 9. What is the total transaction “penetration” for each product? 
/* (hint: penetration = number of transactions where at least 1 quantity 
   of a product was purchased divided by total number of transactions) */
WITH cte AS (
    SELECT pd.product_name, COUNT(DISTINCT s.txn_id) AS transactions_of_products, 
          (SELECT COUNT(DISTINCT txn_id)
		   FROM sales) AS total_transactions
    FROM sales AS s
    JOIN product_details AS pd
    ON s.prod_id=pd.product_id
    GROUP BY pd.product_name)
SELECT product_name, 
       ROUND((CAST(transactions_of_products AS NUMERIC)/CAST(total_transactions AS NUMERIC))*100,2) AS transaction_penetration
FROM cte
--------------------------------------------------------------------------------------------------------------------

